package com.mm.medicalman.greendao.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.mm.medicalman.DBBean.MockResults;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "MOCK_RESULTS".
*/
public class MockResultsDao extends AbstractDao<MockResults, Long> {

    public static final String TABLENAME = "MOCK_RESULTS";

    /**
     * Properties of entity MockResults.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Record_id = new Property(0, Long.class, "record_id", true, "_id");
        public final static Property Type = new Property(1, String.class, "type", false, "TYPE");
        public final static Property Timestamp = new Property(2, String.class, "timestamp", false, "TIMESTAMP");
        public final static Property Minute = new Property(3, String.class, "minute", false, "MINUTE");
        public final static Property Percent = new Property(4, Long.class, "percent", false, "PERCENT");
        public final static Property Name = new Property(5, String.class, "name", false, "NAME");
        public final static Property Is_up = new Property(6, String.class, "is_up", false, "IS_UP");
    }


    public MockResultsDao(DaoConfig config) {
        super(config);
    }
    
    public MockResultsDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"MOCK_RESULTS\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: record_id
                "\"TYPE\" TEXT," + // 1: type
                "\"TIMESTAMP\" TEXT," + // 2: timestamp
                "\"MINUTE\" TEXT," + // 3: minute
                "\"PERCENT\" INTEGER," + // 4: percent
                "\"NAME\" TEXT," + // 5: name
                "\"IS_UP\" TEXT);"); // 6: is_up
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"MOCK_RESULTS\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, MockResults entity) {
        stmt.clearBindings();
 
        Long record_id = entity.getRecord_id();
        if (record_id != null) {
            stmt.bindLong(1, record_id);
        }
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(2, type);
        }
 
        String timestamp = entity.getTimestamp();
        if (timestamp != null) {
            stmt.bindString(3, timestamp);
        }
 
        String minute = entity.getMinute();
        if (minute != null) {
            stmt.bindString(4, minute);
        }
 
        Long percent = entity.getPercent();
        if (percent != null) {
            stmt.bindLong(5, percent);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(6, name);
        }
 
        String is_up = entity.getIs_up();
        if (is_up != null) {
            stmt.bindString(7, is_up);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, MockResults entity) {
        stmt.clearBindings();
 
        Long record_id = entity.getRecord_id();
        if (record_id != null) {
            stmt.bindLong(1, record_id);
        }
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(2, type);
        }
 
        String timestamp = entity.getTimestamp();
        if (timestamp != null) {
            stmt.bindString(3, timestamp);
        }
 
        String minute = entity.getMinute();
        if (minute != null) {
            stmt.bindString(4, minute);
        }
 
        Long percent = entity.getPercent();
        if (percent != null) {
            stmt.bindLong(5, percent);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(6, name);
        }
 
        String is_up = entity.getIs_up();
        if (is_up != null) {
            stmt.bindString(7, is_up);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public MockResults readEntity(Cursor cursor, int offset) {
        MockResults entity = new MockResults( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // record_id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // type
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // timestamp
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // minute
            cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4), // percent
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // name
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6) // is_up
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, MockResults entity, int offset) {
        entity.setRecord_id(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setType(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setTimestamp(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setMinute(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setPercent(cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4));
        entity.setName(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setIs_up(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(MockResults entity, long rowId) {
        entity.setRecord_id(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(MockResults entity) {
        if(entity != null) {
            return entity.getRecord_id();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(MockResults entity) {
        return entity.getRecord_id() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
