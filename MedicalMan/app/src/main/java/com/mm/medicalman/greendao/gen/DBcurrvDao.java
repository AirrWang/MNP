package com.mm.medicalman.greendao.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.mm.medicalman.DBBean.DBcurrv;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "DBCURRV".
*/
public class DBcurrvDao extends AbstractDao<DBcurrv, String> {

    public static final String TABLENAME = "DBCURRV";

    /**
     * Properties of entity DBcurrv.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Num = new Property(0, String.class, "num", true, "NUM");
        public final static Property Quest_v = new Property(1, String.class, "quest_v", false, "QUEST_V");
        public final static Property Class_v = new Property(2, String.class, "class_v", false, "CLASS_V");
    }


    public DBcurrvDao(DaoConfig config) {
        super(config);
    }
    
    public DBcurrvDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"DBCURRV\" (" + //
                "\"NUM\" TEXT PRIMARY KEY NOT NULL ," + // 0: num
                "\"QUEST_V\" TEXT," + // 1: quest_v
                "\"CLASS_V\" TEXT);"); // 2: class_v
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"DBCURRV\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, DBcurrv entity) {
        stmt.clearBindings();
 
        String num = entity.getNum();
        if (num != null) {
            stmt.bindString(1, num);
        }
 
        String quest_v = entity.getQuest_v();
        if (quest_v != null) {
            stmt.bindString(2, quest_v);
        }
 
        String class_v = entity.getClass_v();
        if (class_v != null) {
            stmt.bindString(3, class_v);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, DBcurrv entity) {
        stmt.clearBindings();
 
        String num = entity.getNum();
        if (num != null) {
            stmt.bindString(1, num);
        }
 
        String quest_v = entity.getQuest_v();
        if (quest_v != null) {
            stmt.bindString(2, quest_v);
        }
 
        String class_v = entity.getClass_v();
        if (class_v != null) {
            stmt.bindString(3, class_v);
        }
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public DBcurrv readEntity(Cursor cursor, int offset) {
        DBcurrv entity = new DBcurrv( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // num
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // quest_v
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2) // class_v
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, DBcurrv entity, int offset) {
        entity.setNum(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setQuest_v(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setClass_v(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
     }
    
    @Override
    protected final String updateKeyAfterInsert(DBcurrv entity, long rowId) {
        return entity.getNum();
    }
    
    @Override
    public String getKey(DBcurrv entity) {
        if(entity != null) {
            return entity.getNum();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(DBcurrv entity) {
        return entity.getNum() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
