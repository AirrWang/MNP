package com.mm.medicalman.greendao.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.mm.medicalman.DBBean.Subject;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "SUBJECT".
*/
public class SubjectDao extends AbstractDao<Subject, String> {

    public static final String TABLENAME = "SUBJECT";

    /**
     * Properties of entity Subject.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Q_id = new Property(0, String.class, "q_id", true, "Q_ID");
        public final static Property C_id = new Property(1, String.class, "c_id", false, "C_ID");
        public final static Property Q_num = new Property(2, long.class, "q_num", false, "Q_NUM");
        public final static Property Question = new Property(3, String.class, "question", false, "QUESTION");
        public final static Property Answer = new Property(4, String.class, "answer", false, "ANSWER");
        public final static Property Analysis = new Property(5, String.class, "analysis", false, "ANALYSIS");
        public final static Property Option1 = new Property(6, String.class, "option1", false, "OPTION1");
        public final static Property Option2 = new Property(7, String.class, "option2", false, "OPTION2");
        public final static Property Option3 = new Property(8, String.class, "option3", false, "OPTION3");
        public final static Property Option4 = new Property(9, String.class, "option4", false, "OPTION4");
        public final static Property Option5 = new Property(10, String.class, "option5", false, "OPTION5");
        public final static Property Deleted = new Property(11, String.class, "deleted", false, "DELETED");
        public final static Property Ability = new Property(12, String.class, "ability", false, "ABILITY");
        public final static Property Difficulty = new Property(13, String.class, "difficulty", false, "DIFFICULTY");
        public final static Property Point = new Property(14, String.class, "point", false, "POINT");
    }


    public SubjectDao(DaoConfig config) {
        super(config);
    }
    
    public SubjectDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"SUBJECT\" (" + //
                "\"Q_ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: q_id
                "\"C_ID\" TEXT," + // 1: c_id
                "\"Q_NUM\" INTEGER NOT NULL ," + // 2: q_num
                "\"QUESTION\" TEXT," + // 3: question
                "\"ANSWER\" TEXT," + // 4: answer
                "\"ANALYSIS\" TEXT," + // 5: analysis
                "\"OPTION1\" TEXT," + // 6: option1
                "\"OPTION2\" TEXT," + // 7: option2
                "\"OPTION3\" TEXT," + // 8: option3
                "\"OPTION4\" TEXT," + // 9: option4
                "\"OPTION5\" TEXT," + // 10: option5
                "\"DELETED\" TEXT," + // 11: deleted
                "\"ABILITY\" TEXT," + // 12: ability
                "\"DIFFICULTY\" TEXT," + // 13: difficulty
                "\"POINT\" TEXT);"); // 14: point
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"SUBJECT\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Subject entity) {
        stmt.clearBindings();
 
        String q_id = entity.getQ_id();
        if (q_id != null) {
            stmt.bindString(1, q_id);
        }
 
        String c_id = entity.getC_id();
        if (c_id != null) {
            stmt.bindString(2, c_id);
        }
        stmt.bindLong(3, entity.getQ_num());
 
        String question = entity.getQuestion();
        if (question != null) {
            stmt.bindString(4, question);
        }
 
        String answer = entity.getAnswer();
        if (answer != null) {
            stmt.bindString(5, answer);
        }
 
        String analysis = entity.getAnalysis();
        if (analysis != null) {
            stmt.bindString(6, analysis);
        }
 
        String option1 = entity.getOption1();
        if (option1 != null) {
            stmt.bindString(7, option1);
        }
 
        String option2 = entity.getOption2();
        if (option2 != null) {
            stmt.bindString(8, option2);
        }
 
        String option3 = entity.getOption3();
        if (option3 != null) {
            stmt.bindString(9, option3);
        }
 
        String option4 = entity.getOption4();
        if (option4 != null) {
            stmt.bindString(10, option4);
        }
 
        String option5 = entity.getOption5();
        if (option5 != null) {
            stmt.bindString(11, option5);
        }
 
        String deleted = entity.getDeleted();
        if (deleted != null) {
            stmt.bindString(12, deleted);
        }
 
        String ability = entity.getAbility();
        if (ability != null) {
            stmt.bindString(13, ability);
        }
 
        String difficulty = entity.getDifficulty();
        if (difficulty != null) {
            stmt.bindString(14, difficulty);
        }
 
        String point = entity.getPoint();
        if (point != null) {
            stmt.bindString(15, point);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Subject entity) {
        stmt.clearBindings();
 
        String q_id = entity.getQ_id();
        if (q_id != null) {
            stmt.bindString(1, q_id);
        }
 
        String c_id = entity.getC_id();
        if (c_id != null) {
            stmt.bindString(2, c_id);
        }
        stmt.bindLong(3, entity.getQ_num());
 
        String question = entity.getQuestion();
        if (question != null) {
            stmt.bindString(4, question);
        }
 
        String answer = entity.getAnswer();
        if (answer != null) {
            stmt.bindString(5, answer);
        }
 
        String analysis = entity.getAnalysis();
        if (analysis != null) {
            stmt.bindString(6, analysis);
        }
 
        String option1 = entity.getOption1();
        if (option1 != null) {
            stmt.bindString(7, option1);
        }
 
        String option2 = entity.getOption2();
        if (option2 != null) {
            stmt.bindString(8, option2);
        }
 
        String option3 = entity.getOption3();
        if (option3 != null) {
            stmt.bindString(9, option3);
        }
 
        String option4 = entity.getOption4();
        if (option4 != null) {
            stmt.bindString(10, option4);
        }
 
        String option5 = entity.getOption5();
        if (option5 != null) {
            stmt.bindString(11, option5);
        }
 
        String deleted = entity.getDeleted();
        if (deleted != null) {
            stmt.bindString(12, deleted);
        }
 
        String ability = entity.getAbility();
        if (ability != null) {
            stmt.bindString(13, ability);
        }
 
        String difficulty = entity.getDifficulty();
        if (difficulty != null) {
            stmt.bindString(14, difficulty);
        }
 
        String point = entity.getPoint();
        if (point != null) {
            stmt.bindString(15, point);
        }
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public Subject readEntity(Cursor cursor, int offset) {
        Subject entity = new Subject( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // q_id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // c_id
            cursor.getLong(offset + 2), // q_num
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // question
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // answer
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // analysis
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // option1
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // option2
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // option3
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // option4
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // option5
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // deleted
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // ability
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // difficulty
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14) // point
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Subject entity, int offset) {
        entity.setQ_id(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setC_id(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setQ_num(cursor.getLong(offset + 2));
        entity.setQuestion(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setAnswer(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setAnalysis(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setOption1(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setOption2(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setOption3(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setOption4(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setOption5(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setDeleted(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setAbility(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setDifficulty(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setPoint(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
     }
    
    @Override
    protected final String updateKeyAfterInsert(Subject entity, long rowId) {
        return entity.getQ_id();
    }
    
    @Override
    public String getKey(Subject entity) {
        if(entity != null) {
            return entity.getQ_id();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Subject entity) {
        return entity.getQ_id() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
