package com.mm.medicalman.greendao.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.mm.medicalman.DBBean.Course;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "COURSE".
*/
public class CourseDao extends AbstractDao<Course, String> {

    public static final String TABLENAME = "COURSE";

    /**
     * Properties of entity Course.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property C_id = new Property(0, String.class, "c_id", true, "C_ID");
        public final static Property C_num = new Property(1, long.class, "c_num", false, "C_NUM");
        public final static Property Serial = new Property(2, String.class, "serial", false, "SERIAL");
        public final static Property Name = new Property(3, String.class, "name", false, "NAME");
        public final static Property Deleted = new Property(4, String.class, "deleted", false, "DELETED");
    }


    public CourseDao(DaoConfig config) {
        super(config);
    }
    
    public CourseDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"COURSE\" (" + //
                "\"C_ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: c_id
                "\"C_NUM\" INTEGER NOT NULL ," + // 1: c_num
                "\"SERIAL\" TEXT," + // 2: serial
                "\"NAME\" TEXT," + // 3: name
                "\"DELETED\" TEXT);"); // 4: deleted
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"COURSE\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Course entity) {
        stmt.clearBindings();
 
        String c_id = entity.getC_id();
        if (c_id != null) {
            stmt.bindString(1, c_id);
        }
        stmt.bindLong(2, entity.getC_num());
 
        String serial = entity.getSerial();
        if (serial != null) {
            stmt.bindString(3, serial);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(4, name);
        }
 
        String deleted = entity.getDeleted();
        if (deleted != null) {
            stmt.bindString(5, deleted);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Course entity) {
        stmt.clearBindings();
 
        String c_id = entity.getC_id();
        if (c_id != null) {
            stmt.bindString(1, c_id);
        }
        stmt.bindLong(2, entity.getC_num());
 
        String serial = entity.getSerial();
        if (serial != null) {
            stmt.bindString(3, serial);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(4, name);
        }
 
        String deleted = entity.getDeleted();
        if (deleted != null) {
            stmt.bindString(5, deleted);
        }
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public Course readEntity(Cursor cursor, int offset) {
        Course entity = new Course( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // c_id
            cursor.getLong(offset + 1), // c_num
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // serial
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // name
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4) // deleted
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Course entity, int offset) {
        entity.setC_id(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setC_num(cursor.getLong(offset + 1));
        entity.setSerial(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setName(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setDeleted(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
     }
    
    @Override
    protected final String updateKeyAfterInsert(Course entity, long rowId) {
        return entity.getC_id();
    }
    
    @Override
    public String getKey(Course entity) {
        if(entity != null) {
            return entity.getC_id();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Course entity) {
        return entity.getC_id() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
