package com.mm.medicalman.greendao.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.mm.medicalman.DBBean.MockRule;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "MOCK_RULE".
*/
public class MockRuleDao extends AbstractDao<MockRule, String> {

    public static final String TABLENAME = "MOCK_RULE";

    /**
     * Properties of entity MockRule.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, String.class, "id", true, "ID");
        public final static Property Minute = new Property(1, String.class, "minute", false, "MINUTE");
        public final static Property Q_num = new Property(2, String.class, "q_num", false, "Q_NUM");
        public final static Property Rule_score = new Property(3, String.class, "rule_score", false, "RULE_SCORE");
        public final static Property Rule_question = new Property(4, String.class, "rule_question", false, "RULE_QUESTION");
        public final static Property Q_difficulty_type = new Property(5, String.class, "q_difficulty_type", false, "Q_DIFFICULTY_TYPE");
        public final static Property Q_difficulty_num = new Property(6, String.class, "q_difficulty_num", false, "Q_DIFFICULTY_NUM");
        public final static Property Q_class_c_id = new Property(7, String.class, "q_class_c_id", false, "Q_CLASS_C_ID");
        public final static Property Q_class_num = new Property(8, String.class, "q_class_num", false, "Q_CLASS_NUM");
    }


    public MockRuleDao(DaoConfig config) {
        super(config);
    }
    
    public MockRuleDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"MOCK_RULE\" (" + //
                "\"ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: id
                "\"MINUTE\" TEXT," + // 1: minute
                "\"Q_NUM\" TEXT," + // 2: q_num
                "\"RULE_SCORE\" TEXT," + // 3: rule_score
                "\"RULE_QUESTION\" TEXT," + // 4: rule_question
                "\"Q_DIFFICULTY_TYPE\" TEXT," + // 5: q_difficulty_type
                "\"Q_DIFFICULTY_NUM\" TEXT," + // 6: q_difficulty_num
                "\"Q_CLASS_C_ID\" TEXT," + // 7: q_class_c_id
                "\"Q_CLASS_NUM\" TEXT);"); // 8: q_class_num
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"MOCK_RULE\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, MockRule entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
 
        String minute = entity.getMinute();
        if (minute != null) {
            stmt.bindString(2, minute);
        }
 
        String q_num = entity.getQ_num();
        if (q_num != null) {
            stmt.bindString(3, q_num);
        }
 
        String rule_score = entity.getRule_score();
        if (rule_score != null) {
            stmt.bindString(4, rule_score);
        }
 
        String rule_question = entity.getRule_question();
        if (rule_question != null) {
            stmt.bindString(5, rule_question);
        }
 
        String q_difficulty_type = entity.getQ_difficulty_type();
        if (q_difficulty_type != null) {
            stmt.bindString(6, q_difficulty_type);
        }
 
        String q_difficulty_num = entity.getQ_difficulty_num();
        if (q_difficulty_num != null) {
            stmt.bindString(7, q_difficulty_num);
        }
 
        String q_class_c_id = entity.getQ_class_c_id();
        if (q_class_c_id != null) {
            stmt.bindString(8, q_class_c_id);
        }
 
        String q_class_num = entity.getQ_class_num();
        if (q_class_num != null) {
            stmt.bindString(9, q_class_num);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, MockRule entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
 
        String minute = entity.getMinute();
        if (minute != null) {
            stmt.bindString(2, minute);
        }
 
        String q_num = entity.getQ_num();
        if (q_num != null) {
            stmt.bindString(3, q_num);
        }
 
        String rule_score = entity.getRule_score();
        if (rule_score != null) {
            stmt.bindString(4, rule_score);
        }
 
        String rule_question = entity.getRule_question();
        if (rule_question != null) {
            stmt.bindString(5, rule_question);
        }
 
        String q_difficulty_type = entity.getQ_difficulty_type();
        if (q_difficulty_type != null) {
            stmt.bindString(6, q_difficulty_type);
        }
 
        String q_difficulty_num = entity.getQ_difficulty_num();
        if (q_difficulty_num != null) {
            stmt.bindString(7, q_difficulty_num);
        }
 
        String q_class_c_id = entity.getQ_class_c_id();
        if (q_class_c_id != null) {
            stmt.bindString(8, q_class_c_id);
        }
 
        String q_class_num = entity.getQ_class_num();
        if (q_class_num != null) {
            stmt.bindString(9, q_class_num);
        }
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public MockRule readEntity(Cursor cursor, int offset) {
        MockRule entity = new MockRule( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // minute
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // q_num
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // rule_score
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // rule_question
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // q_difficulty_type
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // q_difficulty_num
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // q_class_c_id
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8) // q_class_num
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, MockRule entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setMinute(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setQ_num(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setRule_score(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setRule_question(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setQ_difficulty_type(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setQ_difficulty_num(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setQ_class_c_id(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setQ_class_num(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
     }
    
    @Override
    protected final String updateKeyAfterInsert(MockRule entity, long rowId) {
        return entity.getId();
    }
    
    @Override
    public String getKey(MockRule entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(MockRule entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
