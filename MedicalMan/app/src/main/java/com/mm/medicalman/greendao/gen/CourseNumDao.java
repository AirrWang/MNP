package com.mm.medicalman.greendao.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.mm.medicalman.DBBean.CourseNum;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "COURSE_NUM".
*/
public class CourseNumDao extends AbstractDao<CourseNum, String> {

    public static final String TABLENAME = "COURSE_NUM";

    /**
     * Properties of entity CourseNum.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property C_id = new Property(0, String.class, "c_id", false, "C_ID");
        public final static Property Ability = new Property(1, String.class, "ability", false, "ABILITY");
        public final static Property Q_id = new Property(2, String.class, "q_id", false, "Q_ID");
        public final static Property C_vp_num = new Property(3, String.class, "c_vp_num", false, "C_VP_NUM");
        public final static Property Type = new Property(4, String.class, "type", true, "TYPE");
    }


    public CourseNumDao(DaoConfig config) {
        super(config);
    }
    
    public CourseNumDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"COURSE_NUM\" (" + //
                "\"C_ID\" TEXT," + // 0: c_id
                "\"ABILITY\" TEXT," + // 1: ability
                "\"Q_ID\" TEXT," + // 2: q_id
                "\"C_VP_NUM\" TEXT," + // 3: c_vp_num
                "\"TYPE\" TEXT PRIMARY KEY NOT NULL );"); // 4: type
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"COURSE_NUM\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, CourseNum entity) {
        stmt.clearBindings();
 
        String c_id = entity.getC_id();
        if (c_id != null) {
            stmt.bindString(1, c_id);
        }
 
        String ability = entity.getAbility();
        if (ability != null) {
            stmt.bindString(2, ability);
        }
 
        String q_id = entity.getQ_id();
        if (q_id != null) {
            stmt.bindString(3, q_id);
        }
 
        String c_vp_num = entity.getC_vp_num();
        if (c_vp_num != null) {
            stmt.bindString(4, c_vp_num);
        }
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(5, type);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, CourseNum entity) {
        stmt.clearBindings();
 
        String c_id = entity.getC_id();
        if (c_id != null) {
            stmt.bindString(1, c_id);
        }
 
        String ability = entity.getAbility();
        if (ability != null) {
            stmt.bindString(2, ability);
        }
 
        String q_id = entity.getQ_id();
        if (q_id != null) {
            stmt.bindString(3, q_id);
        }
 
        String c_vp_num = entity.getC_vp_num();
        if (c_vp_num != null) {
            stmt.bindString(4, c_vp_num);
        }
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(5, type);
        }
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4);
    }    

    @Override
    public CourseNum readEntity(Cursor cursor, int offset) {
        CourseNum entity = new CourseNum( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // c_id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // ability
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // q_id
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // c_vp_num
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4) // type
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, CourseNum entity, int offset) {
        entity.setC_id(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setAbility(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setQ_id(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setC_vp_num(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setType(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
     }
    
    @Override
    protected final String updateKeyAfterInsert(CourseNum entity, long rowId) {
        return entity.getType();
    }
    
    @Override
    public String getKey(CourseNum entity) {
        if(entity != null) {
            return entity.getType();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(CourseNum entity) {
        return entity.getType() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
