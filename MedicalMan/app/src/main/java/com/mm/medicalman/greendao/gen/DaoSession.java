package com.mm.medicalman.greendao.gen;

import java.util.Map;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.AbstractDaoSession;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.identityscope.IdentityScopeType;
import org.greenrobot.greendao.internal.DaoConfig;

import com.mm.medicalman.DBBean.Course;
import com.mm.medicalman.DBBean.CourseNum;
import com.mm.medicalman.DBBean.DBcurrv;
import com.mm.medicalman.DBBean.LoveSubject;
import com.mm.medicalman.DBBean.MockResults;
import com.mm.medicalman.DBBean.MockRule;
import com.mm.medicalman.DBBean.Subject;
import com.mm.medicalman.DBBean.TitleRecordExamination;
import com.mm.medicalman.DBBean.TitleRecordLove;
import com.mm.medicalman.DBBean.TitleRecordPracticeCompetence;
import com.mm.medicalman.DBBean.TitleRecordProfessionalPractice;
import com.mm.medicalman.DBBean.TopicRecord;

import com.mm.medicalman.greendao.gen.CourseDao;
import com.mm.medicalman.greendao.gen.CourseNumDao;
import com.mm.medicalman.greendao.gen.DBcurrvDao;
import com.mm.medicalman.greendao.gen.LoveSubjectDao;
import com.mm.medicalman.greendao.gen.MockResultsDao;
import com.mm.medicalman.greendao.gen.MockRuleDao;
import com.mm.medicalman.greendao.gen.SubjectDao;
import com.mm.medicalman.greendao.gen.TitleRecordExaminationDao;
import com.mm.medicalman.greendao.gen.TitleRecordLoveDao;
import com.mm.medicalman.greendao.gen.TitleRecordPracticeCompetenceDao;
import com.mm.medicalman.greendao.gen.TitleRecordProfessionalPracticeDao;
import com.mm.medicalman.greendao.gen.TopicRecordDao;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * {@inheritDoc}
 * 
 * @see org.greenrobot.greendao.AbstractDaoSession
 */
public class DaoSession extends AbstractDaoSession {

    private final DaoConfig courseDaoConfig;
    private final DaoConfig courseNumDaoConfig;
    private final DaoConfig dBcurrvDaoConfig;
    private final DaoConfig loveSubjectDaoConfig;
    private final DaoConfig mockResultsDaoConfig;
    private final DaoConfig mockRuleDaoConfig;
    private final DaoConfig subjectDaoConfig;
    private final DaoConfig titleRecordExaminationDaoConfig;
    private final DaoConfig titleRecordLoveDaoConfig;
    private final DaoConfig titleRecordPracticeCompetenceDaoConfig;
    private final DaoConfig titleRecordProfessionalPracticeDaoConfig;
    private final DaoConfig topicRecordDaoConfig;

    private final CourseDao courseDao;
    private final CourseNumDao courseNumDao;
    private final DBcurrvDao dBcurrvDao;
    private final LoveSubjectDao loveSubjectDao;
    private final MockResultsDao mockResultsDao;
    private final MockRuleDao mockRuleDao;
    private final SubjectDao subjectDao;
    private final TitleRecordExaminationDao titleRecordExaminationDao;
    private final TitleRecordLoveDao titleRecordLoveDao;
    private final TitleRecordPracticeCompetenceDao titleRecordPracticeCompetenceDao;
    private final TitleRecordProfessionalPracticeDao titleRecordProfessionalPracticeDao;
    private final TopicRecordDao topicRecordDao;

    public DaoSession(Database db, IdentityScopeType type, Map<Class<? extends AbstractDao<?, ?>>, DaoConfig>
            daoConfigMap) {
        super(db);

        courseDaoConfig = daoConfigMap.get(CourseDao.class).clone();
        courseDaoConfig.initIdentityScope(type);

        courseNumDaoConfig = daoConfigMap.get(CourseNumDao.class).clone();
        courseNumDaoConfig.initIdentityScope(type);

        dBcurrvDaoConfig = daoConfigMap.get(DBcurrvDao.class).clone();
        dBcurrvDaoConfig.initIdentityScope(type);

        loveSubjectDaoConfig = daoConfigMap.get(LoveSubjectDao.class).clone();
        loveSubjectDaoConfig.initIdentityScope(type);

        mockResultsDaoConfig = daoConfigMap.get(MockResultsDao.class).clone();
        mockResultsDaoConfig.initIdentityScope(type);

        mockRuleDaoConfig = daoConfigMap.get(MockRuleDao.class).clone();
        mockRuleDaoConfig.initIdentityScope(type);

        subjectDaoConfig = daoConfigMap.get(SubjectDao.class).clone();
        subjectDaoConfig.initIdentityScope(type);

        titleRecordExaminationDaoConfig = daoConfigMap.get(TitleRecordExaminationDao.class).clone();
        titleRecordExaminationDaoConfig.initIdentityScope(type);

        titleRecordLoveDaoConfig = daoConfigMap.get(TitleRecordLoveDao.class).clone();
        titleRecordLoveDaoConfig.initIdentityScope(type);

        titleRecordPracticeCompetenceDaoConfig = daoConfigMap.get(TitleRecordPracticeCompetenceDao.class).clone();
        titleRecordPracticeCompetenceDaoConfig.initIdentityScope(type);

        titleRecordProfessionalPracticeDaoConfig = daoConfigMap.get(TitleRecordProfessionalPracticeDao.class).clone();
        titleRecordProfessionalPracticeDaoConfig.initIdentityScope(type);

        topicRecordDaoConfig = daoConfigMap.get(TopicRecordDao.class).clone();
        topicRecordDaoConfig.initIdentityScope(type);

        courseDao = new CourseDao(courseDaoConfig, this);
        courseNumDao = new CourseNumDao(courseNumDaoConfig, this);
        dBcurrvDao = new DBcurrvDao(dBcurrvDaoConfig, this);
        loveSubjectDao = new LoveSubjectDao(loveSubjectDaoConfig, this);
        mockResultsDao = new MockResultsDao(mockResultsDaoConfig, this);
        mockRuleDao = new MockRuleDao(mockRuleDaoConfig, this);
        subjectDao = new SubjectDao(subjectDaoConfig, this);
        titleRecordExaminationDao = new TitleRecordExaminationDao(titleRecordExaminationDaoConfig, this);
        titleRecordLoveDao = new TitleRecordLoveDao(titleRecordLoveDaoConfig, this);
        titleRecordPracticeCompetenceDao = new TitleRecordPracticeCompetenceDao(titleRecordPracticeCompetenceDaoConfig, this);
        titleRecordProfessionalPracticeDao = new TitleRecordProfessionalPracticeDao(titleRecordProfessionalPracticeDaoConfig, this);
        topicRecordDao = new TopicRecordDao(topicRecordDaoConfig, this);

        registerDao(Course.class, courseDao);
        registerDao(CourseNum.class, courseNumDao);
        registerDao(DBcurrv.class, dBcurrvDao);
        registerDao(LoveSubject.class, loveSubjectDao);
        registerDao(MockResults.class, mockResultsDao);
        registerDao(MockRule.class, mockRuleDao);
        registerDao(Subject.class, subjectDao);
        registerDao(TitleRecordExamination.class, titleRecordExaminationDao);
        registerDao(TitleRecordLove.class, titleRecordLoveDao);
        registerDao(TitleRecordPracticeCompetence.class, titleRecordPracticeCompetenceDao);
        registerDao(TitleRecordProfessionalPractice.class, titleRecordProfessionalPracticeDao);
        registerDao(TopicRecord.class, topicRecordDao);
    }
    
    public void clear() {
        courseDaoConfig.clearIdentityScope();
        courseNumDaoConfig.clearIdentityScope();
        dBcurrvDaoConfig.clearIdentityScope();
        loveSubjectDaoConfig.clearIdentityScope();
        mockResultsDaoConfig.clearIdentityScope();
        mockRuleDaoConfig.clearIdentityScope();
        subjectDaoConfig.clearIdentityScope();
        titleRecordExaminationDaoConfig.clearIdentityScope();
        titleRecordLoveDaoConfig.clearIdentityScope();
        titleRecordPracticeCompetenceDaoConfig.clearIdentityScope();
        titleRecordProfessionalPracticeDaoConfig.clearIdentityScope();
        topicRecordDaoConfig.clearIdentityScope();
    }

    public CourseDao getCourseDao() {
        return courseDao;
    }

    public CourseNumDao getCourseNumDao() {
        return courseNumDao;
    }

    public DBcurrvDao getDBcurrvDao() {
        return dBcurrvDao;
    }

    public LoveSubjectDao getLoveSubjectDao() {
        return loveSubjectDao;
    }

    public MockResultsDao getMockResultsDao() {
        return mockResultsDao;
    }

    public MockRuleDao getMockRuleDao() {
        return mockRuleDao;
    }

    public SubjectDao getSubjectDao() {
        return subjectDao;
    }

    public TitleRecordExaminationDao getTitleRecordExaminationDao() {
        return titleRecordExaminationDao;
    }

    public TitleRecordLoveDao getTitleRecordLoveDao() {
        return titleRecordLoveDao;
    }

    public TitleRecordPracticeCompetenceDao getTitleRecordPracticeCompetenceDao() {
        return titleRecordPracticeCompetenceDao;
    }

    public TitleRecordProfessionalPracticeDao getTitleRecordProfessionalPracticeDao() {
        return titleRecordProfessionalPracticeDao;
    }

    public TopicRecordDao getTopicRecordDao() {
        return topicRecordDao;
    }

}
